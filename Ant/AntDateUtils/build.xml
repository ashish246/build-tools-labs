<project xmlns:ivy="antlib:org.apache.ivy.ant" 
       name="dateUtilsProject" default="main" basedir=".">
	
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="lib/xmltask-1.16.jar" />
	
	<description>
		Create a Java Project (JAR) with Ant build script
	</description>
 
	<property name="projectName" value="DateUtils" />
	<property name="src.dir" location="src" />
	<property name="build.dir" location="bin" />
	<property name="dist.dir" location="dist" />
	<property name="dist.lib.dir" location="dist/lib" />
	<property name="lib.dir" value="lib" />
	<property name="main-class" value="com.date.utils.DateUtils" />
 
	<!-- ivy start -->
	<!-- ivy to get dependencies and copy to project lib folder automatically -->
	<target name="resolve" description="retrieve dependencies with ivy">
		<ivy:retrieve />
	</target>
 
	<!-- install ivy -->
	<target name="ivy" description="Install ivy">
		<mkdir dir="${user.home}/.ant/lib" />
		<get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0-rc1/ivy-2.4.0-rc1.jar" />
	</target>
	<!-- ivy end -->
 
	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>
 
	<!-- external libraries classpath, we don't need sources and javadoc -->
	<path id="classpath">
		<fileset dir="${basedir}/">
			<include name="${lib.dir}/*.jar" />
			<exclude name="${lib.dir}/*sources.jar"/>
			<exclude name="${lib.dir}/*javadoc.jar"/>
		</fileset>
	</path>
 
	<!-- To work with external libraries, need classpath to compile -->
	<target name="compile" depends="init" description="compile the source ">
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" />
	</target>
 
	<!-- constructs the external libraries classpath name -->
	<pathconvert property="classpath.name" pathsep=" ">
		<path refid="classpath" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.jar" to="lib/*.jar" />
			</chainedmapper>
		</mapper>
	</pathconvert>
	
	<target name="print-classpath"> 
		<pathconvert property="classpathInName" refid="classpath" pathsep=" "/>
		<echo>Classpath is ${classpathInName}</echo>	 
	 </target>
 
	<!-- Group all dependencies into a big dependency-all.jar -->
	<target name="copy-dependencies">
 
		<mkdir dir="${dist.lib.dir}" />
 
		<jar jarfile="${dist.lib.dir}/dependencies-all.jar">
			<zipgroupfileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>
 
	</target>
 
	<!-- jar it, extract above dependency-all.jar and zip it with project files -->
	<target name="jar" depends="compile, copy-dependencies" 
                description="package, output to JAR">
 
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.lib.dir}" />
 
		<jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
			<zipfileset src="${dist.lib.dir}/dependencies-all.jar" 
                                excludes="META-INF/*.SF" />
		</jar>
 
	</target>
	
 
	<target name="clean" description="clean up">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>
 
	<!-- Default, run this -->
	<target name="main" depends="clean, compile, jar" />
	
	
	<target name="build-deployinfo" depends="compile" description="Builds components and retrieves the revision info from repository and cartridges.">
			<antcall target="deployinfo" />
		</target>
		
	<target name="deployinfo" description="Retrieve the short revision hash for the source repository.">
		<!-- The -Dbuild-version command line option is for bamboo build version -->
		<condition property="bamboo.build.version" value="${build-version}" else="">
			<isset property="build-version" />
		</condition>
		
		<echo> Bamboo build version: ${bamboo.build.version}</echo>
		<antcall target="git-repoinfo" />
		<antcall target="build-version">
			<param name="bamboo.build.version" value="${bamboo.build.version}"/>
		</antcall>
	</target>
	
	
	<target name="build-version" description="Retrieve the short revision hash for the source repository.">
		
		<!-- Delete the old build_versioninfo.properies file before saving current revision data -->
		<delete file="build_versioninfo.properties" />
				
		<!-- Add build time and version for each cartridge-->
		<tstamp>
			<format property="DEPLOY_TIMESTAMP" pattern="yyyyMMddhhmmss" locale="en,AU" />
		</tstamp>
		
		<var name="cartridge.counter" value="0"/>
		
		<if>
			<!-- Check if the cartridge exists in the target folder or not-->
			<available file="${basedir}" type="dir" />
			<then>
				
				<var name="ivy.revision" unset="true" />
				<var name="ivy.revision.full" unset="true" />
	
				<!-- Fetch the cartridge version number from the source ivy.xml -->
				<xmltask source="${basedir}/ivy.xml">
					<copy path="/ivy-module/info/@revision" property="ivy.revision.full" />
				</xmltask>
	
				<!-- strip the .${build.number} placeholder if found -->
				<propertyregex property="ivy.revision" input="${ivy.revision.full}" regexp=".\$\{build.number\}" replace="" global="true" />
	
				<!-- 
					In case that there was no placeholder in the revision string
					set the string to the original revision string
				 -->
				<condition property="ivy.revision" else="${ivy.revision.full}">
					<isset property="ivy.revision" />
				</condition>
				
				<math result="cartridge.counter" operand1="${cartridge.counter}" operation="+" operand2="1" datatype="int"/>
				
				<!-- Update the cartridge name, build time and build version in the build_versioninfo.properties-->
				<propertyfile file="build_versioninfo.properties">
					<entry  key="intershop.codebase.build.date" value="${DEPLOY_TIMESTAMP}"/>
					<entry  key="intershop.codebase.build.bamboo.version" value="${bamboo.build.version}"/>
					  <entry key="intershop.codebase.build.count" default="00" operation="+" pattern="00" type="int"/>
					  <entry  key="intershop.codebase.build.${cartridge.counter}.name" value="${cartridge}"/>
					  <entry  key="intershop.codebase.build.${cartridge.counter}.version" value="${ivy.revision}"/>
				</propertyfile>
			</then>
		</if>
	</target>
	
	<!-- create binary zip files for cartridge release and share folders -->
	<target name="zip-share" description="Create a single zip file with all share contents of all source cartridges.">

		<property name="share.target" value="${is.target}/share" />

		<mkdir dir="${share.target}" />

		<property name="is.sources.list" value="${is.source}" />
		<property name="local.cartridges" value="${cartridges}" />

		<tstamp>
			<format property="DEPLOY_TIMESTAMP" pattern="yyyyMMddhhmmss" locale="en,AU" />
		</tstamp>

		<for list="${is.sources.list}" delimiter="," param="is.sources.entry">
			<sequential>
				<var name="is.source" unset="true" />
				<var name="cartridges" unset="true" />
				<if>
					<available file="@{is.sources.entry}" type="dir" />
					<then>
						<property name="cartridges" value="" />
						<var name="is.source" value="@{is.sources.entry}" />
						<for list="${local.cartridges}" delimiter=" " param="local.cartridge">
							<sequential>
								<if>
									<available file="@{is.sources.entry}/@{local.cartridge}" type="dir" />
									<then>
										<var name="cartridge" value="${cartridges}@{local.cartridge}" />

										<!-- Copy the content of cartridge/staticfiles/share to the common share folder -->
										<copy todir="${share.target}" includeemptydirs="true" flatten="false">
											<fileset dir="@{is.sources.entry}/@{local.cartridge}/staticfiles">
												<include name="share/**" />
											</fileset>
										</copy>
									</then>
								</if>
							</sequential>
						</for>
					</then>
				</if>
			</sequential>
		</for>

		<!-- zip the common share folder into a single zip file -->

		<zip destfile="${is.target}/combined-share-${DEPLOY_TIMESTAMP}.zip" compress="true">
			<fileset dir="${share.target}">
				<include name="**/**" />
			</fileset>
		</zip>

		<delete verbose="false" includeemptydirs="true">
			<fileset dir="${share.target}">
				<include name="**/**" />
			</fileset>
		</delete>

	</target>
	
	<!-- GIT specific targets -->
	<target name="git-pull" description="Run a 'git pull' the project repository and all source repositories.">
		<ant antfile="git.xml" dir="${basedir}" target="pull" inheritall="true" />
	</target>

	<target name="git-push" description="Run a 'git push' the project repository and all source repositories.">
		<ant antfile="git.xml" dir="${basedir}" target="push" inheritall="true" />
	</target>

	<target name="git-checkout" description="Checkout (switch) to or create a new branch">
		<ant antfile="git.xml" dir="${basedir}" target="checkout" inheritall="true" />
	</target>

	<target name="git-branch" description="Perform branch-related actions.">
		<ant antfile="git.xml" dir="${basedir}" target="branch" inheritall="true" />
	</target>

	<target name="git-tag" description="Perform tag-related actions">
		<ant antfile="git.xml" dir="${basedir}" target="tag" inheritall="true" />
	</target>
	
	<target name="git-repoinfo" description="Retrieve the short revision hash for the source repository.">
		<ant antfile="git.xml" dir="${basedir}" target="revisioninfo" inheritall="true" />
	</target>
 
</project>